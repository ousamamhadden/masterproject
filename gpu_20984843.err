Loaded module: python3/3.6.2
Loaded dependency [numpy/1.13.1-python-3.6.2-openblas-0.2.20]: openblas/0.2.20
Loaded module: numpy/1.13.1-python-3.6.2-openblas-0.2.20

Loading numpy/1.13.1-python-3.6.2-openblas-0.2.20
  Loading requirement: openblas/0.2.20
Loaded module: scipy/0.19.1-python-3.6.2
Loaded module: matplotlib/2.0.2-python-3.6.2
Loaded module: cuda/11.6
The `load_in_4bit` and `load_in_8bit` arguments are deprecated and will be removed in the future versions. Please, pass a `BitsAndBytesConfig` object in `quantization_config` argument instead.
`low_cpu_mem_usage` was None, now set to True since model is quantized.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:17<00:17, 17.10s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:17<00:00,  7.25s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:17<00:00,  8.73s/it]
Some weights of GemmaForSequenceClassification were not initialized from the model checkpoint at google/gemma-2b and are newly initialized: ['score.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/peft/utils/other.py:143: FutureWarning: prepare_model_for_int8_training is deprecated and will be removed in a future version. Use prepare_model_for_kbit_training instead.
  warnings.warn(
Detected kernel version 5.4.268, which is below the recommended minimum of 5.5.0; this can cause the process to hang. It is recommended to upgrade the kernel to the minimum version or higher.
  0%|          | 0/1250 [00:00<?, ?it/s]`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.
/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/torch/utils/checkpoint.py:429: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(
/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/bitsandbytes/autograd/_functions.py:322: UserWarning: MatMul8bitLt: inputs will be cast from torch.float32 to float16 during quantization
  warnings.warn(f"MatMul8bitLt: inputs will be cast from {A.dtype} to float16 during quantization")
  0%|          | 1/1250 [00:22<7:58:05, 22.97s/it]  0%|          | 2/1250 [00:47<8:14:06, 23.76s/it]  0%|          | 3/1250 [01:05<7:25:14, 21.42s/it]  0%|          | 4/1250 [01:21<6:34:23, 18.99s/it]  0%|          | 5/1250 [01:48<7:34:21, 21.90s/it]  0%|          | 6/1250 [02:07<7:14:37, 20.96s/it]  1%|          | 7/1250 [02:26<7:00:51, 20.32s/it]  1%|          | 8/1250 [02:52<7:36:58, 22.08s/it]  1%|          | 9/1250 [03:09<7:03:05, 20.46s/it]  1%|          | 10/1250 [03:35<7:42:48, 22.39s/it]                                                     1%|          | 10/1250 [03:35<7:42:48, 22.39s/it]  1%|          | 11/1250 [03:54<7:21:28, 21.38s/it]  1%|          | 12/1250 [04:17<7:30:05, 21.81s/it]  1%|          | 13/1250 [04:37<7:19:58, 21.34s/it]  1%|          | 14/1250 [04:52<6:39:07, 19.37s/it]  1%|          | 15/1250 [05:09<6:20:50, 18.50s/it]  1%|▏         | 16/1250 [05:30<6:35:11, 19.22s/it]  1%|▏         | 17/1250 [05:48<6:29:42, 18.96s/it]  1%|▏         | 18/1250 [06:10<6:46:34, 19.80s/it]  2%|▏         | 19/1250 [06:34<7:14:05, 21.16s/it]  2%|▏         | 20/1250 [06:50<6:42:30, 19.63s/it]                                                     2%|▏         | 20/1250 [06:50<6:42:30, 19.63s/it]  2%|▏         | 21/1250 [07:13<7:01:34, 20.58s/it]  2%|▏         | 22/1250 [07:32<6:48:54, 19.98s/it]Traceback (most recent call last):
  File "/zhome/8d/a/147395/masterproject/masterproject/src/finetunegemma.py", line 93, in <module>
    train()
  File "/zhome/8d/a/147395/masterproject/masterproject/src/finetunegemma.py", line 77, in train
    trainer.train()
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/transformers/trainer.py", line 1624, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/transformers/trainer.py", line 1961, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/transformers/trainer.py", line 2911, in training_step
    self.accelerator.backward(loss)
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/accelerate/accelerator.py", line 1964, in backward
    loss.backward(**kwargs)
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/torch/_tensor.py", line 492, in backward
    torch.autograd.backward(
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/torch/autograd/function.py", line 288, in apply
    return user_fn(self, *args)
           ^^^^^^^^^^^^^^^^^^^^
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/torch/utils/checkpoint.py", line 288, in backward
    torch.autograd.backward(outputs_with_grad, args_with_grad)
  File "/zhome/8d/a/147395/miniconda3/envs/src/lib/python3.11/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.54 GiB. GPU 0 has a total capacty of 31.73 GiB of which 1.08 GiB is free. Including non-PyTorch memory, this process has 30.65 GiB memory in use. Of the allocated memory 28.33 GiB is allocated by PyTorch, and 1.95 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
  2%|▏         | 22/1250 [07:45<7:13:30, 21.18s/it]
make: *** [finetunegemma] Error 1
